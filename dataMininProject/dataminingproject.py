# -*- coding: utf-8 -*-
"""dataMiningProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zxmN-yhh9wqKY3GIM3iQ0K1P-dH5Q7Hk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/diabetes_binary_health_indicators_BRFSS2015.csv")
df.head()

"""PREPROCESS OF DATA"""

df.info()

df.isna().sum()

df.describe().T

fig, axes = plt.subplots(1, 2, figsize=(15, 5))

axes = axes.flatten()
sns.countplot(x='Age', data=df, ax=axes[0])
axes[0].set_title('Age')
axes[0].set_xlabel('Age Group')


df["Sex"].value_counts().plot(kind='pie', autopct='%1.1f%%', ax=axes[1], title="Gender")
plt.legend(['Female', 'Male'])
plt.show()

plt.hist(df['BMI'], bins=100, color='pink', edgecolor='black')
plt.title("BMI Distribution")

fig, ax = plt.subplots(2, 3, figsize=(15, 6))
for i, col in enumerate(["Smoker", "PhysActivity", "Fruits", "Veggies", "HvyAlcoholConsump"]):
    df[col].value_counts().plot.pie(ax=ax[i//3, i%3], autopct='%.2f%%', title=col, colors=['orchid','#77BFE2'])
    df[col] = df[col].map({0.0: 'No', 1.0: 'Yes'})
plt.suptitle('Habits', fontsize=14)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

df['NoDocbcCost'] = df['NoDocbcCost'].map({0.0: 'No', 1.0: 'Yes'})
df['Education'] = df['Education'].map({1: 'Never attended',
                                     2: 'Elementary',
                                     3: 'High school',
                                     4: 'High school graduate',
                                     5: 'College/technical school',
                                     6: 'College graduate'})
df['Income'] = df['Income'].map({1: 'Less $10K',
                                 2: 'Less $15K',
                                 3: 'Less $20K',
                                 4: 'Less $25K',
                                 5: 'Less $35K',
                                 6: 'Less $50K',
                                 7: 'Less $75K',
                                 8: '$75K or more'})

selected_columns = ['NoDocbcCost', 'Education', 'Income']
selected_data = df[selected_columns]

fig, axes = plt.subplots(nrows=3, ncols=1, figsize=(10, 15))

for i, column in enumerate(selected_columns):
    sns.countplot(x=column, data=df, ax=axes[i], palette='viridis')
    axes[i].set_title(f'Distribution of {column}')
    axes[i].set_xlabel(column)
    axes[i].set_ylabel('Count')


plt.tight_layout()
plt.subplots_adjust(hspace=0.5)
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns


df['DiffWalk'] = df['DiffWalk'].map({0.0: 'No', 1.0: 'Yes'})


fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(10, 10))

for i, column in enumerate(['MentHlth', 'PhysHlth']):
    sns.histplot(df[column], bins=20, kde=True, ax=axes[i], color='skyblue')
    axes[i].set_title(f'Distribution of {column}')

    if column == 'MentHlth':
        axes[i].set_title('Days of poor mental health scale 1-30 days')
    elif column == 'PhysHlth':
        axes[i].set_title('Physical illness or injury days in past 30 days scale 1-30')

    axes[i].set_xlabel(column)
    axes[i].set_ylabel('Count')


plt.figure(figsize=(8, 6))
sns.histplot(df['DiffWalk'], bins=20, kde=False, color='skyblue')
plt.title('Difficulty walking or climbing stairs')
plt.xlabel('DiffWalk')
plt.ylabel('Count')

plt.tight_layout()
plt.show()

fig, ax = plt.subplots(2, 2, figsize=(12, 6))
for i, col in enumerate(["HighBP", "HighChol", "Stroke", "HeartDiseaseorAttack"]):
    df[col].value_counts().plot.pie(ax=ax[i//2, i%2], autopct='%.2f%%', title=col, colors=['#DC612B','#2DBB64'])
    df[col] = df[col].map({0.0: 'No', 1.0: 'Yes'})
plt.suptitle('Health Issues', fontsize=14)
plt.show()

df = pd.read_csv("/content/diabetes_binary_health_indicators_BRFSS2015.csv")

import seaborn as sns

df['Diabetes_binary'] = df['Diabetes_binary'].map({0.0: 'No', 1.0: 'Yes'})


sns.boxplot(x=df['Income'], y=df['Diabetes_binary'])


plt.show()

sns.boxplot(x=df['BMI'], y=df['Diabetes_binary'])

plt.show()

sns.boxplot(x=df['GenHlth'], y=df['Diabetes_binary'])


plt.show()

df = pd.read_csv("/content/diabetes_binary_health_indicators_BRFSS2015.csv")

"""NORMALIZATION"""

# There is just BMI column to be normalized. Others were written according to a specific score.
min_bmi = df["BMI"].min()
max_bmi = df["BMI"].max()

# Min-Max Normalization and replace the original "BMI" column
df["BMI"] = (df["BMI"] - min_bmi) / (max_bmi - min_bmi)

diabet_no=df.loc[df['Diabetes_binary']<1]
diabet_yes=df.loc[df['Diabetes_binary']>0]
diabet_no

diabet_yes

Q1=diabet_no['BMI'].quantile(0.25)
Q3=diabet_no['BMI'].quantile(0.75)
IQR=Q3-Q1
IQR

Q=Q3+(1.5*IQR)
Q

outlier_out=df[~((df['BMI']<(Q3+1.5*IQR))) & (df['Diabetes_binary']<1)]
outlier_out.shape

df.drop(df[~((df['BMI']<(Q3+1.5*IQR)))&(df['Diabetes_binary']<1)].index, inplace=True)
df.shape

Q1_2=diabet_yes['BMI'].quantile(0.25)
Q3_2=diabet_yes['BMI'].quantile(0.75)
IQR_2=Q3_2-Q1_2
IQR_2

Q_2=Q3_2+(1.5*IQR_2)
Q_2

outlier_out2=df[~((df['BMI']<(Q3_2+1.5*IQR_2))) & (df['Diabetes_binary']>0)]
outlier_out2.shape

df.drop(df[~((df['BMI']<(Q3_2+1.5*IQR_2)))&(df['Diabetes_binary']>0)].index, inplace=True)
df.shape

"""TEST AND TRAINING"""

x = df.drop('Diabetes_binary', axis=1)
y = df['Diabetes_binary']
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x,y, train_size=0.8, random_state=0)

"""Decision Tree"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
# Decision tree and training
tree_model = DecisionTreeClassifier(random_state=4)
tree_model.fit(X_train, y_train)
# Evaluation of model performance on test dataset
y_test_pred = tree_model.predict(X_test)
test_accuracy = accuracy_score(y_test, y_test_pred)
print(f"Accuracy rate: {test_accuracy:.2f}")
# Classification Data
print("Classification Report:")
print(classification_report(y_test, y_test_pred))
# Confusion Matrix
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_test_pred))

cm = confusion_matrix(y_test, y_test_pred)

sns.heatmap(cm, annot=True, fmt="d", cmap="crest", cbar=False,
            xticklabels=['No Diabetes', 'Diabetes'], yticklabels=['No Diabetes', 'Diabetes'])

"""GAUSSIAN NAIVE BAYES"""

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

model = GaussianNB()

model.fit(X_train, y_train)
y_model = model.predict(X_test)
print(f"Accuracy Rate: {accuracy_score(y_test, y_model):.2f}")
print(classification_report(y_test, y_model))

cm = confusion_matrix(y_test, y_model)

sns.heatmap(cm, annot=True, fmt="d", cmap="crest", cbar=False,
            xticklabels=['No Diabetes', 'Diabetes'], yticklabels=['No Diabetes', 'Diabetes'])

from sklearn.metrics import roc_curve, auc
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

metrics_nb = [accuracy_score(y_test, y_model),
              precision_score(y_test, y_model),
              recall_score(y_test, y_model),
              f1_score(y_test, y_model)]

metrics_dt = [accuracy_score(y_test, y_test_pred),
              precision_score(y_test, y_test_pred),
              recall_score(y_test, y_test_pred),
              f1_score(y_test, y_test_pred)]

# Creating a DataFrame for visualization
import pandas as pd

df_metrics = pd.DataFrame({'Naive Bayes': metrics_nb, 'Decision Tree': metrics_dt},
                          index=['Accuracy', 'Precision', 'Recall', 'F1-Score'])

# Plotting
sns.set(style="whitegrid")
df_metrics.T.plot(kind='bar', figsize=(10, 6))
plt.title('Comparison of Naive Bayes and Decision Tree')
plt.ylabel('Score')
plt.show()